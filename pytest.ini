[pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Test markers
markers =
    benchmark: mark test as a benchmark
    slow: mark test as slow
    integration: mark test as integration test
    quantum: mark test as quantum test
    structural: mark test as structural test
    feedback: mark test as feedback test

# Test configuration
addopts = -v --cov=src --cov-report=term-missing --cov-report=html --benchmark-only --benchmark-autosave --benchmark-save-data --benchmark-json=benchmark_results.json --html=report.html --self-contained-html

# Test timeout
timeout = 300

# Test parallelization
numprocesses = auto
dist = loadscope

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test output
console_output_style = progress

filterwarnings =
    ignore::DeprecationWarning
    ignore::UserWarning
    ignore::FutureWarning
    ignore::RuntimeWarning
    ignore::ResourceWarning
    ignore::ImportWarning
    ignore::PendingDeprecationWarning
    ignore::DeprecationWarning:qiskit.*
    ignore::UserWarning:qiskit.*
    ignore::FutureWarning:qiskit.*
    ignore::RuntimeWarning:qiskit.*
    ignore::ResourceWarning:qiskit.*
    ignore::ImportWarning:qiskit.*
    ignore::PendingDeprecationWarning:qiskit.* 